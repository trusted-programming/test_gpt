fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut future = self.future.take().expect("cannot poll twice");
        match catch_unwind(|| (future.poll(), future)) {
            Ok((Poll::NotReady, f)) => {
                self.future = Some(f);
                Poll::NotReady
            }
            Ok((Poll::Ok(v), _)) => Poll::Ok(Ok(v)),
            Ok((Poll::Err(e), _)) => Poll::Ok(Err(e)),
            Err(e) => Poll::Err(e),
        }
    }